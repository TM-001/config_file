;; #### immeadietely
;; Use a hook so the message doesn't get clobbered by other messages.
(add-hook 'emacs-startup-hook
    (lambda ()
        (message "Emacs ready in %s with %d garbage collections."
            (format "%.2f seconds"
                (float-time
                    (time-subtract after-init-time before-init-time)))
	    gcs-done)))
;; ---- face ---------------------------------->>>
(menu-bar-mode 0)			               ;; menu
(tool-bar-mode 0)                                      ;; hide disappear
(scroll-bar-mode 0)				       ;; scroll bar
(blink-cursor-mode 0)                                  ;; Close blink
(setq blink-cursor-mode t)
(show-paren-mode t)                                    ;; march bracket hight light
(setq frame-title-format nil)			       ;; change the frame title
(global-hl-line-mode t)                                ;; highlight current line

;; ---- font ---------------------------------->>>
;; chractaer
(set-frame-font " -outline-Inconsolata-bold-normal-normal-mono-14-*-*-*-c-*-iso8859-1")
;; china font FangSong
(dolist (charset '(han))
   (set-fontset-font (frame-parameter nil 'font) charset
                     (font-spec :family "FangSong")))
;; China font stop solution
(setq inhibit-compacting-font-caches t)

;; System coding
(setq default-buffer-file-coding-system 'utf-8) 
(setq default-process-coding-system 'utf-8)
(setq save-buffer-coding-system 'utf-8)
;; (set-language-environment 'utf-8)

(setq inhibit-startup-message t)                       ;;close boot buffer
;; #### delay load
;; ---- system -------------------------------->>>
(setq package-archives '(("gnu" . "https://mirrors.ustc.edu.cn/elpa/gnu/")
                         ("melpa" . "https://mirrors.ustc.edu.cn/elpa/melpa/")
                         ("melpa-stable" . "https://mirrors.ustc.edu.cn/elpa/melpa-stable/")
                         ("org" . "https://mirrors.ustc.edu.cn/elpa/org/")))
(package-initialize) ;; You might already have this line

(setq eshell-path-env (getenv "EMACS_PATH"))

(fset 'yes-or-no-p 'y-or-n-p)
(setq comment-column 52)
(setq fill-column 100)

(electric-pair-mode t)
(electric-indent-mode nil)
(column-number-mode t)			               ;;cursor position

(setq
    backup-by-copying t                      ;; don't clobber symlinks
    backup-directory-alist
	'(("." . "e:/backup/emacs/temp"))    ;; don't litter my fs tree
	delete-old-versions t
	kept-new-versions 3
	kept-old-versions 2
	version-control t)                   ;; use versioned backups


;; ---- key ----------------------------------->>>
(global-set-key (kbd "C-. r c")   'revert-buffer-with-coding-system)
(global-set-key (kbd "C-q")       'delete-window)

(global-set-key (kbd "C-. s e")   'eshell)
(global-set-key (kbd "C-. e")     'eshell-command)
(global-set-key (kbd "C-. s f")   'flycheck-mode)
(global-set-key (kbd "C-. s y")   'yas-minor-mode)
(global-set-key (kbd "M-l")       'latex-math-preview-expression)

(global-set-key (kbd "C-;")       'comment-indent)
(global-set-key (kbd "M-;")       'comment-region)
(global-set-key (kbd "C-:")       'uncomment-region)
(global-set-key (kbd "C-. C-s")   'replace-string)
(global-set-key (kbd "C-. M-s")   'replace-regexp)

(global-set-key (kbd "C-S-j")     'avy-goto-word-1)
(global-set-key (kbd "M-j")       'avy-goto-char)

(global-set-key (kbd "C-. s h")   'hs-minor-mode)
(global-set-key (kbd "C-. h h")   'hs-hide-block)
(global-set-key (kbd "C-. h s")   'hs-show-block)

(global-set-key (kbd "C-x C-c")     'nil)
(global-set-key (kbd "C-x C-c k")   'save-buffers-kill-terminal)
;; ---- package ------------------------------->>>
(use-package cc-mode
  :commands  cc-mode
  :config    (setq c-default-style "linux"))

(use-package asm-mode
  :commands  asm-mode
  :config    (setq tab-width 4))

(use-package hippie-exp
  :commands  hippie-exp
  :config   (setq hippie-expand-try-functions-list
		  '(try-expand-dabbrev
		       try-expand-dabbrev-visible
		       try-expand-dabbrev-all-buffers
		       try-complete-file-name-partially
		       try-complete-file-name
		       try-expand-all-abbrevs
		       try-expand-list
		       try-expand-line
		       try-expand-dabbrev-all-buffers
		       try-expand-dabbrev-from-kill
		       try-complete-lisp-symbol-partially
		       try-complete-lisp-symbol)))

(use-package company
  :commands  company
  :bind      ("C-. s c"    . 'company-mode)
  :config    (setq company-show-numbers t)
             (setq company-idle-delay 0)
	     (setq company-etags-ignore-case t)
	     (setq company-backends '(company-gtags
				      company-etags
				      company-clang
				      company-elisp)))

(use-package flycheck
	     :commands flycheck)

(use-package org
  :commands  org
;;  :hook      (org-mode . yas-minor-mode)
;;             (org-mode . cdlatex-mode)   
  :config    (org-babel-do-load-languages
	      'org-babel-load-languages
	      '((C . t)
		(latex . t)))
             (setq org-latex-default-packages-alist
		   (quote
		    (("AUTO" "inputenc" t
		      ("pdflatex"))
		     ("T1" "fontenc" t
		      ("pdflatex"))
		     ("" "graphicx" t nil)
		     ("" "grffile" t nil)
		     ("" "longtable" nil nil)
		     ("" "wrapfig" nil nil)
		     ("" "rotating" nil nil)
		     ("normalem" "ulem" t nil)
		     ("" "amsmath" t nil)
		     ("" "textcomp" t nil)
		     ("" "amssymb" t nil)
		     ("UTF8" "ctex" t nil)
		     ("" "capt-of" nil nil)
		     ("" "hyperref" nil nil))))
	     (setq org-startup-indented t))

(use-package   org-preview-html
	       :commands    org-preview-html)

(use-package   yasnippet
  :commands    yasnippet
  :config      (setq yas-indent-line 'fixed)
               (yas-reload-all)
               (require 'popup)
	       (define-key popup-menu-keymap (kbd "M-n") 'popup-next)
	       (define-key popup-menu-keymap (kbd "M-p") 'popup-previous)
	       (defun yas/popup-isearch-prompt (prompt choices &optional display-fn)
		 (when (featurep 'popup)
		   (popup-menu*
		    (mapcar
		     (lambda (choice)
		       (popup-make-item
			(or (and display-fn (funcall display-fn choice))
			    choice)
			:value choice))
		     choices)
		    :prompt prompt
		    ;; start isearch mode immediately
		    :isearch t)))
	       (setq yas/prompt-functions '(yas/popup-isearch-prompt yas/no-prompt)))

(use-package   markdown-mode
  :commands    markdown-mode
  :config      (setq markdown-commands "d:/program/mypro/custom/pandoc"))

;; (use-package   makedown-preview-mode
;; 	       :commands    makedown-preview-mode)

(use-package   pdf-tools
  :commands    pdf-tools
  :mode       "\\.pdf\\'"
  :config     (pdf-tools-install))

(use-package eww
  :commands  eww
  :config    (set 'eww-header-line '""))

(use-package   yasnippet
  :commands    yasnippet)

(use-package   auctex
  :commands    auctex)
(use-package   cdlatex
  :commands    cdlatex)

;; ---- variable ------------------------------>>>
;;(setq tab-with 4)

;; ---- function ------------------------------>>>
;; (defun insert-current-time ()
;;     "Insert the current time"
;;     (interactive "*")
;;     (insert (current-time-string)))

;;    find ./ -name "*.[hc]" | xargs.exe etags
;;    ctags -e -R *
;;    (eshell-command '"ls -l")
;; ---- draft --------------------------------->>>
;; #### latex
;; (setq TeX-auto-save t)
;; (setq TeX-parse-self t)
;; (setq-default TeX-master nil)

;; (add-hook 'LaTeX-mode-hook 'visual-line-mode)
;; (add-hook 'LaTeX-mode-hook 'flyspell-mode)
;; (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
;; (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
;; (setq reftex-plug-into-AUCTeX t)
;; (add-hook 'find-file-hook 'TeX-fold-buffer t)
;; (add-hook 'LaTeX-mode-hook (lambda ()
;;                              (TeX-fold-mode 1))
;; (add-hook 'find-file-hook 'TeX-fold-buffer t)
;;
;; (setq alpha-list '((85 55) (100 100)))    
;; (defun loop-alpha ()			
;;  "frame lucency"
;;  (interactive)  
;;  (let ((h (car alpha-list)))                  
;;    ((lambda (a ab)  
;;       (set-frame-parameter (selected-frame) 'alpha (list a ab))  
;;       (add-to-list 'default-frame-alist (cons 'alpha (list a ab)))  
;;       ) (car h) (car (cdr h)))  
;;    (setq alpha-list (cdr (append alpha-list (list h))))  
;;    )  					
;; )

;; (set-default-font "-outline-Courier New-normal-normal-normal-mono-14-*-*-*-c-*-gb2312")
;; (setq initial-scratch-message nil)                                 ;;close scratch buffer

;; (global-linum-mode t)
;; (setq default-frame-alist '((undecorated . t)))   ;;hide the title
;; (add-hook 'c++-mode-hook
;; 	  (lambda () (setq flycheck-gcc-include-path
;; 			   (list "D:/file/lib/templeate/zet6/"))))

;; (show-paren-mode t)                             ;;march bracket hight light

;; (setq font-use-system-font 0)
;; (custom-set-variables '(font-use-system-font t))

;; gtags
;; (load-file "~/.emacs.d/custom/gtags.el")
;; (setq gtags-auto-update t)
;; (setq gtags-ignore-case t)		
;; (load-file "~/.emacs.d/elisp/etags-update.pl")

;; etags
;; (require 'etags-update)
;; (load-file "~/.emacs.d/custom/etags-update.el")

;; ctags
;; (add-hook 'company-mode-hook 'turn-on-ctags-auto-update-mode)
;; (setq ctags-global-auto-update-mode)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(package-selected-packages
   '(htmlize popup yasnippet use-package pdf-tools org-preview-html markdown-preview-mode latex-math-preview flycheck diminish company color-theme cdlatex avy auctex))
 '(show-paren-mode t)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
